{"version":3,"sources":["services/points.service.js","components/header/Header.jsx","components/table/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["points_service","Promise","resolve","customerId","customerName","amount","transactionDate","Header","React","createElement","Table","_ref","thead","tbody","map","th","index","key","columnTitle","point","columnName","App","_useState","useState","_useState2","_slicedToArray","transactionData","setTransactionData","useEffect","fetch","then","data","results","incomingData","months","pointsPerTransaction","transaction","points","diff100","diff50","month","Date","getMonth","_objectSpread","byCustomer","groupByPoints","forEach","monthNumber","numTransactions","groupByCustomer","custKey","cRow","push","totByCustomer","calculateResults","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c7b471d.chunk.js","sourcesContent":["export default function () {\n  return Promise.resolve([\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 120,\n      transactionDate: \"2022-05-01\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 75,\n      transactionDate: \"2022-05-21\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 94,\n      transactionDate: \"2022-05-21\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 10,\n      transactionDate: \"2022-06-01\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 75,\n      transactionDate: \"2022-06-21\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 200,\n      transactionDate: \"2022-07-01\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 1,\n      transactionDate: \"2022-07-04\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 80,\n      transactionDate: \"2022-07-03\",\n    },\n    {\n      customerId: 1,\n      customerName: \"Tom\",\n      amount: 224,\n      transactionDate: \"2022-07-21\",\n    },\n    {\n      customerId: 2,\n      customerName: \"Goutham\",\n      amount: 125,\n      transactionDate: \"2022-05-01\",\n    },\n    {\n      customerId: 2,\n      customerName: \"Michael\",\n      amount: 75,\n      transactionDate: \"2022-05-21\",\n    },\n    {\n      customerId: 2,\n      customerName: \"Michael\",\n      amount: 10,\n      transactionDate: \"2022-06-01\",\n    },\n    {\n      customerId: 2,\n      customerName: \"Michael\",\n      amount: 75,\n      transactionDate: \"2022-06-21\",\n    },\n    {\n      customerId: 2,\n      customerName: \"Michael\",\n      amount: 200,\n      transactionDate: \"2022-07-01\",\n    },\n    {\n      customerId: 2,\n      customerName: \"Michael\",\n      amount: 224,\n      transactionDate: \"2022-07-21\",\n    },\n    {\n      customerId: 3,\n      customerName: \"Temp User\",\n      amount: 120,\n      transactionDate: \"2022-06-21\",\n    },\n  ]);\n}\n","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Rewards Program App</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./Table.css\";\n\nconst Table = ({ thead, tbody }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {thead.map((th, index) => (\n            <th key={index}>{th.columnTitle}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {tbody.map((point, index) => (\n          <tr key={index}>\n            {thead.map((th, index) => (\n              <td key={index}>{point[th.columnName]}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport fetch from \"./services/points.service\";\nimport \"./App.css\";\nimport Header from \"./components/header/Header\";\nimport Table from \"./components/table/Table\";\n\nfunction calculateResults(incomingData) {\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const pointsPerTransaction = incomingData.map((transaction) => {\n    let points = 0;\n    const diff100 = transaction.amount - 100;\n    const diff50 = transaction.amount - diff100 - 50;\n\n    if (diff100 > 0) {\n      points += diff100 * 2;\n    }\n    if (transaction.amount > 50) {\n      points += diff50;\n    }\n    const month = new Date(transaction.transactionDate).getMonth();\n    return { ...transaction, points, month };\n  });\n\n  let byCustomer = {};\n  let groupByPoints = {};\n  pointsPerTransaction.forEach((pointsPerTransaction) => {\n    let { customerId, customerName, month, points, amount } =\n      pointsPerTransaction;\n    if (!byCustomer[customerId]) {\n      byCustomer[customerId] = [];\n    }\n    if (!groupByPoints[customerName]) {\n      groupByPoints[customerName] = 0;\n    }\n    groupByPoints[customerName] += points;\n    if (byCustomer[customerId][month]) {\n      byCustomer[customerId][month].points += points;\n      byCustomer[customerId][month].amount += amount;\n      byCustomer[customerId][month].monthNumber = month;\n      byCustomer[customerId][month].numTransactions++;\n    } else {\n      byCustomer[customerId][month] = {\n        customerId,\n        customerName,\n        monthNumber: month,\n        month: months[month],\n        numTransactions: 1,\n        amount,\n        points,\n      };\n    }\n  });\n\n  let groupByCustomer = [];\n  for (const custKey in byCustomer) {\n    byCustomer[custKey].forEach((cRow) => {\n      groupByCustomer.push(cRow);\n    });\n  }\n  let totByCustomer = [];\n  for (const key in groupByPoints) {\n    totByCustomer.push({\n      customerName: key,\n      points: groupByPoints[key],\n    });\n  }\n\n  return {\n    groupByCustomer,\n    groupByPoints: totByCustomer,\n  };\n}\n\nfunction App() {\n  const [transactionData, setTransactionData] = useState(null);\n\n  const rewardTableColumns = [\n    {\n      columnTitle: \"Customer\",\n      columnName: \"customerName\",\n    },\n    {\n      columnTitle: \"Month\",\n      columnName: \"month\",\n    },\n    {\n      columnTitle: \"No. of Transactions\",\n      columnName: \"numTransactions\",\n    },\n    {\n      columnTitle: \"Amount\",\n      columnName: \"amount\",\n    },\n    {\n      columnTitle: \"Reward Points\",\n      columnName: \"points\",\n    },\n  ];\n\n  const totalTableColumns = [\n    {\n      columnTitle: \"Customer\",\n      columnName: \"customerName\",\n    },\n    {\n      columnTitle: \"Points\",\n      columnName: \"points\",\n    },\n  ];\n\n  useEffect(() => {\n    fetch().then((data) => {\n      const results = calculateResults(data);\n      setTransactionData(results);\n    });\n  }, []);\n\n  return (\n    <div>\n      <Header />\n      {transactionData !== null && (\n        <div className=\"table-container\">\n          <h4>Month wise customer points</h4>\n          <Table\n            thead={rewardTableColumns}\n            tbody={transactionData.groupByCustomer}\n          />\n          <br />\n          <br />\n          <h4>Total customer points</h4>\n          <Table\n            thead={totalTableColumns}\n            tbody={transactionData.groupByPoints}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}